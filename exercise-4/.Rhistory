install.packages("nycflights13")
library(nycflights)
library(nycflights13)
library(dplyr)
View(flights)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
flights <- mutate(flights, time_gained_lost = arr_delay - dep_delay)
View(flights)
flights <- arrange(flights, desc(time_gained_lost))
source('C:/Users/Tom/Dropbox/info201b-s18/ch10-dplyr/exercise-4/exercise.R', echo=TRUE)
flights <- flights %>%
mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(desc(time_gained_lost))
hist(flights$time_gained_lost)
mean(flights$time_gained_lost, na.rm = TRUE)
flights_sea <- flights %>%
??flights
??nycflights2013
??flights
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
?flights
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
dim(flights)
flights <- flights %>%
mutate(flights, gain_in_air = arr_delay - dep_delay)
flights_sea <- flights %>%
select(origin, dest == SEA, gain_in_air)
flights_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, gain_in_air)
dim(flights_sea)
View(flights_sea)
mean(flights_sea$gain_in_air, na.rm = TRUE)
flights <- arrange(flights, desc(gain_in_air)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(desc(gain_in_air))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gain_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$gain_in_air, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, gain_in_air)
# On average, did flights to SeaTac gain or loose time?
mean(flights_sea$gain_in_air, na.rm = TRUE)
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
flights <- arrange(flights, desc(gain_in_air)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(desc(gain_in_air))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gain_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$gain_in_air, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, gain_in_air)
# On average, did flights to SeaTac gain or loose time?
mean(flights_sea$gain_in_air, na.rm = TRUE)
hist(flights$gain_in_air)
mean(flights$gain_in_air, na.rm = TRUE)
flights_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, gain_in_air)
mean(flights_sea$gain_in_air, na.rm = TRUE)
flights <- arrange(flights, desc(gain_in_air)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(time_gained_lost = arr_delay - dep_delay) %>%
arrange(desc(gain_in_air))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gain_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$gain_in_air, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, gain_in_air)
# On average, did flights to SeaTac gain or loose time?
mean(flights_sea$gain_in_air, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(gain_in_air, na.rm = TRUE),
min_time = min(gain_in_air, na.rm = TRUE),
max_time = max(gain_in_air, na.rm =TRUE)
)
)
summary
library(nycflights13)
library(dplyr)
source('C:/Users/Tom/Dropbox/info201b-s18/ch10-dplyr/exercise-5/exercise.R', echo=TRUE)
?flights
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(mean = mean(dep_delay))
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(mean = mean(dep_delay), na.rm = TRUE)
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay), na.rm = TRUE) %>%
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay), na.rm = TRUE) %>%
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay), na.rm = TRUE) %>%
dep_delay_by_month
View(dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE)
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
max(dep_delay_by_month)
max(dep_delay_by_month, month)
max(dep_delay_by_month, flights$month)
max_avg_dep <- max(dep_delay_by_month, flights$month)
max_avg_dep
source('C:/Users/Tom/Dropbox/info201b-s18/ch10-dplyr/exercise-5/exercise.R', echo=TRUE)
filter(dep_delay_by_month, delay == max(delay) %>%
select(month)
filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
?plot
plot(month, delay, dep_delay_by_month)
plot(dep_delay_by_month)
?flights
head(dep_delay_by_month)
